# Code generated by Lark OpenAPI.

import lark_oapi as lark
from lark_oapi.api.im.v1 import *


def main():
    # 创建client
    client = lark.Client.builder() \
        .app_id(lark.APP_ID) \
        .app_secret(lark.APP_SECRET) \
        .log_level(lark.LogLevel.DEBUG) \
        .build()

    # 构造请求对象
    request: ListMessageRequest = ListMessageRequest.builder() \
        .container_id_type("chat") \
        .container_id("oc_234jsi43d3ssi993d43545f") \
        .start_time("1609296809") \
        .end_time("1608594809") \
        .sort_type("ByCreateTimeAsc") \
        .page_size(20) \
        .page_token("GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ==") \
        .build()

    # 发起请求
    response: ListMessageResponse = client.im.v1.message.list(request)

    # 处理失败返回
    if not response.success():
        lark.logger.error(
            f"client.im.v1.message.list failed, code: {response.code}, msg: {response.msg}, log_id: {response.get_log_id()}")
        return

    # 处理业务结果
    lark.logger.info(lark.JSON.marshal(response.data, indent=4))


# 异步方式
async def amain():
    # 创建client
    client = lark.Client.builder() \
        .app_id(lark.APP_ID) \
        .app_secret(lark.APP_SECRET) \
        .log_level(lark.LogLevel.DEBUG) \
        .build()

    # 构造请求对象
    request: ListMessageRequest = ListMessageRequest.builder() \
        .container_id_type("chat") \
        .container_id("oc_234jsi43d3ssi993d43545f") \
        .start_time("1609296809") \
        .end_time("1608594809") \
        .sort_type("ByCreateTimeAsc") \
        .page_size(20) \
        .page_token("GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ==") \
        .build()

    # 发起请求
    response: ListMessageResponse = await client.im.v1.message.alist(request)

    # 处理失败返回
    if not response.success():
        lark.logger.error(
            f"client.im.v1.message.alist failed, code: {response.code}, msg: {response.msg}, log_id: {response.get_log_id()}")
        return

    # 处理业务结果
    lark.logger.info(lark.JSON.marshal(response.data, indent=4))


if __name__ == "__main__":
    # asyncio.run(amain()) 异步方式
    main()
