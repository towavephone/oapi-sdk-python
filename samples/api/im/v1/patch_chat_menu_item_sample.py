# Code generated by Lark OpenAPI.

import lark_oapi as lark
from lark_oapi.api.im.v1 import *


def main():
    # 创建client
    client = lark.Client.builder() \
        .app_id(lark.APP_ID) \
        .app_secret(lark.APP_SECRET) \
        .log_level(lark.LogLevel.DEBUG) \
        .build()

    # 构造请求对象
    request: PatchChatMenuItemRequest = PatchChatMenuItemRequest.builder() \
        .chat_id("oc_a0553eda9014c201e6969b478895c230") \
        .menu_item_id("7156553273518882844") \
        .request_body(PatchChatMenuItemRequestBody.builder()
                      .update_fields([])
                      .chat_menu_item(ChatMenuItem.builder().build())
                      .build()) \
        .build()

    # 发起请求
    response: PatchChatMenuItemResponse = client.im.v1.chat_menu_item.patch(request)

    # 处理失败返回
    if not response.success():
        lark.logger.error(
            f"client.im.v1.chat_menu_item.patch failed, code: {response.code}, msg: {response.msg}, log_id: {response.get_log_id()}")
        return

    # 处理业务结果
    lark.logger.info(lark.JSON.marshal(response.data, indent=4))


# 异步方式
async def amain():
    # 创建client
    client = lark.Client.builder() \
        .app_id(lark.APP_ID) \
        .app_secret(lark.APP_SECRET) \
        .log_level(lark.LogLevel.DEBUG) \
        .build()

    # 构造请求对象
    request: PatchChatMenuItemRequest = PatchChatMenuItemRequest.builder() \
        .chat_id("oc_a0553eda9014c201e6969b478895c230") \
        .menu_item_id("7156553273518882844") \
        .request_body(PatchChatMenuItemRequestBody.builder()
                      .update_fields([])
                      .chat_menu_item(ChatMenuItem.builder().build())
                      .build()) \
        .build()

    # 发起请求
    response: PatchChatMenuItemResponse = await client.im.v1.chat_menu_item.apatch(request)

    # 处理失败返回
    if not response.success():
        lark.logger.error(
            f"client.im.v1.chat_menu_item.apatch failed, code: {response.code}, msg: {response.msg}, log_id: {response.get_log_id()}")
        return

    # 处理业务结果
    lark.logger.info(lark.JSON.marshal(response.data, indent=4))


if __name__ == "__main__":
    # asyncio.run(amain()) 异步方式
    main()
