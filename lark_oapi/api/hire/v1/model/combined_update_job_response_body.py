# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .combined_job_result_default_job_post import CombinedJobResultDefaultJobPost
from .job import Job
from .job_manager import JobManager
from .registration_schema_info import RegistrationSchemaInfo
from .registration_schema_info import RegistrationSchemaInfo
from .target_major_info import TargetMajorInfo


class CombinedUpdateJobResponseBody(object):
    _types = {
        "default_job_post": CombinedJobResultDefaultJobPost,
        "job": Job,
        "job_manager": JobManager,
    }

    def __init__(self, d=None):
        self.default_job_post: Optional[CombinedJobResultDefaultJobPost] = None
        self.job: Optional[Job] = None
        self.job_manager: Optional[JobManager] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CombinedUpdateJobResponseBodyBuilder":
        return CombinedUpdateJobResponseBodyBuilder()


class CombinedUpdateJobResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._combined_update_job_response_body = CombinedUpdateJobResponseBody()

    def default_job_post(self,
                         default_job_post: CombinedJobResultDefaultJobPost) -> "CombinedUpdateJobResponseBodyBuilder":
        self._combined_update_job_response_body.default_job_post = default_job_post
        return self

    def job(self, job: Job) -> "CombinedUpdateJobResponseBodyBuilder":
        self._combined_update_job_response_body.job = job
        return self

    def job_manager(self, job_manager: JobManager) -> "CombinedUpdateJobResponseBodyBuilder":
        self._combined_update_job_response_body.job_manager = job_manager
        return self

    def build(self) -> "CombinedUpdateJobResponseBody":
        return self._combined_update_job_response_body
